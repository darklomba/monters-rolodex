{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","polygon.js","map.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","Polygon","color","status","suscribed","GeoJSON","data","JSON","parse","polygon","center","MyMap","MapContainer","rotate","zoom","scrollWheelZoom","bearing","fullWidth","TileLayer","url","households","household","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139d299c.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> { props.monster.name } </h2>\n        <h3> { props.monster.email } </h3>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        { props.monsters.map(monster => (\n            < Card key={monster.id} monster={monster} />\n        ))}\n    </div>\n);","import React from 'react';\n\nimport './search-box.styes.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className = 'search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n);","import * as React from \"react\";\nimport { GeoJSON} from 'react-leaflet';\n\nexport const Polygon = (props) => {\n\n    let color;\n\n    if (props.status === \"Viviendo\")\n        switch (props.suscribed) {\n            case true:\n                color = 'green';\n                break;\n            case false:\n                color = 'red';\n                break;\n            default:\n                color = 'white';\n        }\n    else if (props.status === \"En_construcción\")\n        switch (props.suscribed) {\n            case true:\n                color = 'yellowGreen';\n                break;\n            case false:\n                color = 'grey';\n                break;\n            default:\n                color = 'white';\n        }\n    else if (props.status === \"Consultar/En_trámite\")\n        color = 'yellow';\n    else if (props.status === \"Consultar/En_trámite\")\n        color = 'black';\n\n    return (\n        <GeoJSON\n        data={JSON.parse(props.polygon)}\n        color={color}\n        />\n    );\n};\n","import * as React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';\nimport { Polygon } from './polygon.js'\n\nconst center = [-34.8579, -58.0528];\n\nexport const MyMap = (props) => {\n\n    return (\n        <MapContainer center={center} rotate={true} zoom={17} scrollWheelZoom={true} bearing={329.2} fullWidth>\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n            { props.households.map(household => (\n                < Polygon key={household.id} polygon={household.polygon} status={household.status} suscribed={household.suscribed}/>\n                ))\n            }\n        </MapContainer>\n    );\n    \n};","import './App.css';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nimport { MyMap } from './map';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      households: [],\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n\n    fetch('http://quimilar.herokuapp.com/api/v1/households/all')\n    .then(response => response.json())\n    .then(households => this.setState({ households: households }));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const { monsters, searchField, households } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <MyMap households={households}/>\n        <SearchBox\n          placeholder = \"Search monsters\"\n          handleChange = {this.handleChange}\n        />\n        < CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}